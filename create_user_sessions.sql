-- Create user_sessions table for session tracking
-- This is separate from the existing sessions table

CREATE TABLE IF NOT EXISTS user_sessions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  
  -- User reference
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  
  -- Session identification
  session_id TEXT NOT NULL UNIQUE, -- Unique session identifier (generated by client)
  platform TEXT NOT NULL CHECK (platform IN ('web', 'ios-external', 'ios-internal', 'ios-widget', 'macos-internal')),
  
  -- Session timing
  started_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  last_activity_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  ended_at TIMESTAMPTZ NULL, -- NULL for active sessions
  
  -- Session metadata
  device_info JSONB NOT NULL DEFAULT '{}', -- Device information (OS, version, etc.)
  location_info JSONB DEFAULT '{}', -- Location data (country, timezone, etc.)
  user_agent TEXT, -- Browser user agent (web only)
  ip_address INET, -- Client IP address (masked for privacy)
  
  -- Session metrics
  total_duration_seconds INTEGER DEFAULT 0, -- Total session duration in seconds
  activity_count INTEGER DEFAULT 0, -- Number of activities during session
  last_heartbeat_at TIMESTAMPTZ DEFAULT NOW(), -- Last heartbeat received
  
  -- Session status
  status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'idle', 'ended', 'timeout')),
  end_reason TEXT CHECK (end_reason IN ('logout', 'timeout', 'manual', 'app_close', 'crash')),
  
  -- Audit fields
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_session_id ON user_sessions(session_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_platform ON user_sessions(platform);
CREATE INDEX IF NOT EXISTS idx_user_sessions_status ON user_sessions(status);
CREATE INDEX IF NOT EXISTS idx_user_sessions_started_at ON user_sessions(started_at);

-- Enable Row Level Security (RLS)
ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Users can view their own sessions
CREATE POLICY "Users can view their own sessions" ON user_sessions
  FOR SELECT USING (
    auth.uid() = user_id 
    OR auth.role() = 'service_role'
  );

-- Users can create their own sessions
CREATE POLICY "Users can create their own sessions" ON user_sessions
  FOR INSERT WITH CHECK (
    auth.uid() = user_id 
    OR auth.role() = 'service_role'
  );

-- Users can update their own sessions
CREATE POLICY "Users can update their own sessions" ON user_sessions
  FOR UPDATE USING (
    auth.uid() = user_id 
    OR auth.role() = 'service_role'
  );

-- Grant permissions
GRANT SELECT ON user_sessions TO authenticated;
GRANT INSERT ON user_sessions TO authenticated;
GRANT UPDATE ON user_sessions TO authenticated;